#IF {&{is_startup}}
{
    #NOP {TODO: replace this with proper prompt format handling};
    #NOP {#VAR phelp_list[prompt][initprompt] {Sets the prompt format needed for the prompt module.};};
};

#ALIAS {initprompt}
{
    #NOP {TODO: replace this with proper prompt format handling};
    #NOP {#SEND prompt format @n @h/@H @m/@M @v/@V @c @p @x @l@$@t @an @g @wc/@wm @L@$@WH@Wh @WM@Wm @WV@Wv@$CD> @#0 @#1 @#2;};
}

#FUNCTION {display_progress}
{
    #LOCAL args[perc] {%1};
    #LOCAL args[display] {%2};
    #LOCAL args[length] {%3};
    #LOCAL args[color] {%4};

    #FORMAT args[display] {%.$args[length]s} {$args[display]};

    #IF {"$args[color]" == ""}
    {
        #MATH display_color_r {2 * (1 - $args[perc])};
        #MATH display_color_g {2 * $args[perc]};

        #MATH display_color_r {5 * @clamp{$display_color_r;0;1} + 65};
        #MATH display_color_g {5* @clamp{$display_color_g;0;1} + 65};

        #FORMAT args[color] {<%a%aA><aaa>} {$display_color_r} {$display_color_g};
        #UNVAR display_color_r;
        #UNVAR display_color_g;
    };

    #FORMAT display_text_len {%L} {$args[display]};
    #MATH display_text_pre {(($args[length] + 1) - $display_text_len) / 2 + $display_text_len};
    #FORMAT args[display] {%+${display_text_pre}s} {$args[display]};
    #FORMAT args[display] {%-$args[length]s} {$args[display]};
    #UNVAR display_text_pre;
    #UNVAR display_text_len;

    #LOCAL i 0;
    #LOCAL display {};
    #PARSE {$args[display]} {display_text_char}
    {
        #IF {$i < $args[perc]}
        {
            #FORMAT display {%s%c%s} {$display} {$args[color]} {$display_text_char};
        }
        {
            #FORMAT display {%s%c%s} {$display} {<099><G04>} {$display_text_char};
        };

        #MATH i {$i + (1.000/$args[length])};
    };
    #FORMAT display {%s%c} {$display} {<099>};
    #UNVAR display_text_char;

    #RETURN $display;
}

#EVENT {IAC SB GMCP char.prompt IAC SE}
{
    #VAR gmcp[prompt] {%0};

    #IF {"$gmcp[prompt][L]" == "null"}
    {
        #VAR prompt[leader] {Nobody};
    }
    {
        #VAR prompt[leader] {$gmcp[prompt][L]};
    };

    #FORMAT area_len {%L} {%gmcp[prompt][an]};
    #MATH area_len {((26 - $area_len) / 2) + $area_len};
    #FORMAT area_display {%+${area_len}s} {$gmcp[prompt][an]};
    
    #FORMAT prompt1 {%-8s  %-27s  %s%-5s  %s%-13s  %+12s} {${prompt_color}$gmcp[prompt][t]<099>} {$area_display} {GP:} {${prompt_color}$gmcp[prompt][g]<099>} {KG:}{${prompt_color}$gmcp[prompt][wc]<099>/${prompt_color}$gmcp[prompt][wm]<099>} {$prompt[leader]};
    #UNVAR area_display;
    #UNVAR area_len;

    #DRAW tile -3 1 -3 $screen[scroll][x2] {$prompt1};
    #UNVAR prompt1;

    #LOCAL perc {};
    #IF {$gmcp[prompt][h] != {$prompt[hp]} || &{prompt[hp_gauge]} == 0}
    {
        #VAR prompt[hp] $gmcp[prompt][h];
        #MATH perc {1.000*$prompt[hp]/$gmcp[prompt][H]};
        #VAR prompt[hp_gauge] @display_progress{$perc;$prompt[hp]/$gmcp[prompt][H];11};
    };

    #IF {$gmcp[prompt][m] != {$prompt[ma]} || &{prompt[ma_gauge]} == 0}
    {
        #VAR prompt[ma] $gmcp[prompt][m];
        #MATH perc {1.000*$prompt[ma]/$gmcp[prompt][M]};
        #VAR prompt[ma_gauge] @display_progress{$perc;$prompt[ma]/$gmcp[prompt][M];11};
    };

    #IF {$gmcp[prompt][v] != {$prompt[mv]} || &{prompt[mv_gauge]} == 0}
    {
        #VAR prompt[mv] $gmcp[prompt][v];
        #MATH perc {1.000*$prompt[mv]/$gmcp[prompt][V]};
        #VAR prompt[mv_gauge] @display_progress{$perc;$prompt[mv]/$gmcp[prompt][V];11};
    };

    #IF {$gmcp[prompt][x] != {$prompt[xp]} || $gmcp[prompt][l] != {$prompt[lvl]} || &{prompt[xp_gauge]} == 0}
    {
        #VAR prompt[xp] $gmcp[prompt][x];
        #VAR prompt[lvl] $gmcp[prompt][l];

        #LOCAL prev_xp {};
        #LOCAL next_xp {};
        #LOCAL perc_xp {};
        #LOCAL display_perc_xp {};
        #LOCAL display_tnl_xp {};
        #LOCAL display_cur_xp {};
        #LOCAL display_next_xp {};
        #IF {$prompt[lvl] < 50}
        {
            #IF {$prompt[lvl] == 1}
            {
                #LOCAL prev_xp {0};
            }
            {
                #MATH prev_xp {200*($prompt[lvl]**3)};
            };
            #MATH next_xp {200*(($prompt[lvl]+1)**3)};
        }
        {
            #MATH prev_xp {$prompt[xp] - ($prompt[xp] % 25000000)};
            #MATH next_xp {$prompt[xp] - ($prompt[xp] % 25000000) + 25000000};
        };

        #MATH perc_xp {1.000*($prompt[xp] - $prev_xp)/($next_xp - $prev_xp)};
        #MATH prompt[tnl] {$next_xp - $prompt[xp]};
        #MATH display_perc_xp {$perc_xp * 100};
        #FORMAT display_perc_xp {%d} {$display_perc_xp};
        #FORMAT display_cur_xp {%g} {$prompt[xp]};
        #FORMAT display_tnl_xp {%g} {$gmcp[prompt][X]};
        #FORMAT display_next_xp {%g} {$next_xp};

        #VAR prompt[xp_gauge] @display_progress{$perc_xp;${display_cur_xp} / ${display_next_xp} (${display_tnl_xp}) ${display_perc_xp}%;79;<ABF><fff>};
    };

    #FORMAT prompt2 {%-12s%s%-4s%s%+8s} {$gmcp[prompt][n]} {  HP:$prompt[hp_gauge]  MA:$prompt[ma_gauge]  MV:$prompt[mv_gauge]  AC:${prompt_color}}{$gmcp[prompt][c]}{<099>  }{$gmcp[prompt][p]};

    #NOP TNL:$prompt[xp_gauge];

    #DRAW tile -4 1 -4 $screen[scroll][x2] {$prompt2};
    #DRAW tile -2 1 -2 $screen[scroll][x2] {$prompt[xp_gauge]};
    #UNVAR prompt2;

    #FORMAT prompt2 {%s %s %s} {$gmcp[prompt][#1]} {$gmcp[prompt][#2] $gmcp[prompt][#3]};
    #DRAW tile -5 2 -5 $screen[scroll][x2] $prompt2;
}
